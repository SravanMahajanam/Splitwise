<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sn_sw_expense</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Create User Expense</name>
        <order>300</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	var expenseId = current.sys_id;
	// remove any user expense records
	var userExpenses = new GlideRecord('sn_sw_user_expense');
	userExpenses.addQuery('expense_id', expenseId);
	userExpenses.deleteMultiple();
	
	// create an empty record for User Expense table
	var userExpenseRec = new GlideRecord('sn_sw_user_expense');
	var currentUserName = '';
	var currentUserId = '';
	// get the user sys_id using the firstname and lastname
	var currentUser = new GlideRecord('sys_user');
	currentUser.addQuery('sys_id', current.owner);
	currentUser.query();
	if (currentUser.next()) {
		currentUserName = currentUser.first_name + ' ' + currentUser.last_name;
		currentUserId = currentUser.getUniqueValue();
	}
	// if splitting is to be done equally among all users
	if (current.split_equally) {
		var expenseUsers = current.users.toString().split(',');
		var usersCount = expenseUsers.length;
		// current user will be part of the expense by default
		// if current user isn't in the users list, consider it to be there implicitly
		gs.info('expense users: ' + expenseUsers);
		if (expenseUsers.indexOf(currentUserName) == -1 && expenseUsers.indexOf(currentUserId) == -1) {
			gs.info('adding current user');
			usersCount++;
		}
		var amount = current.total / usersCount;
		var expenseUser;
		// loop over the list of users from current.users and set:
		// the owning to (owner), owning from & owing amount
		for (var i = 0; i< expenseUsers.length; ++i) {
			expenseUser = expenseUsers[i];
			// no record created if expenseUser is same as current.owner
			if (expenseUser == currentUserId || expenseUser == currentUserName) {
				continue;
			}
			// if user id is not available, fetch it from the table using the first and last names
			if (expenseUser.indexOf(' ') > -1) {
				var userGR = new GlideRecord('sys_user');
				userGR.addQuery('first_name', expenseUser.substring(0, expenseUser.indexOf(' ') + 1));
				userGR.addQuery('last_name', expenseUser.substring(expenseUser.indexOf(' ') + 1));
				userGR.query();
				if (userGR.next()) {
					expenseUser = userGR.getUniqueValue();
				}
			}
			userExpenseRec.newRecord();
			// set expense id from current.expenseId
			userExpenseRec.setValue('expense_id', expenseId);
			userExpenseRec.setValue('owing_to', current.owner);
			userExpenseRec.setValue('amount', amount);
			userExpenseRec.setValue('owned_from', expenseUser);
			userExpenseRec.setValue('status', 'PENDING');
			//Insert the new User Expense record into the table
			userExpenseRec.insert();
		}
	} else {
		// split amount is not same for all users, iterate using split details
		// Iterate over each user to create the user expense record
		for(var userName in current.user_amount) {
			var user = new GlideRecord('sys_user');
			user.addQuery('name', userName);
			user.query();
			if (user.next()) {
				// no user expense record is created if expenseUser is same as current.owner
				expenseUser = user.first_name + ' ' + user.last_name;
				if (expenseUser == currentUserId || expenseUser == currentUserName) {
					continue;
				}
				userExpenseRec.newRecord();
				userExpenseRec.setValue('expense_id', expenseId);
				userExpenseRec.setValue('owing_to', current.owner);
				userExpenseRec.setValue('amount', current.user_amount[userName]);
				userExpenseRec.setValue('owned_from', user.sys_id);
				userExpenseRec.setValue('status', 'PENDING');
				//Insert the new User Expense record into the table
				userExpenseRec.insert();
			}
		}
	}
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-10-27 11:12:25</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>2684baea53442010d6cdddeeff7b12c6</sys_id>
        <sys_mod_count>86</sys_mod_count>
        <sys_name>Create User Expense</sys_name>
        <sys_overrides/>
        <sys_package display_value="Splitwise" source="sn_sw">b620c6ee53c02010d6cdddeeff7b120a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Splitwise">b620c6ee53c02010d6cdddeeff7b120a</sys_scope>
        <sys_update_name>sys_script_2684baea53442010d6cdddeeff7b12c6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-11-20 07:15:18</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=2684baea53442010d6cdddeeff7b12c6"/>
</record_update>
