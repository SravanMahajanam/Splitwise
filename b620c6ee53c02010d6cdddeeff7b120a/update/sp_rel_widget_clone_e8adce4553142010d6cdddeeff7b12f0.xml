<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_rel_widget_clone">
    <sp_rel_widget_clone action="INSERT_OR_UPDATE">
        <child display_value="Group Details">e8adce4553142010d6cdddeeff7b12ed</child>
        <cloned>2020-11-04 02:29:11</cloned>
        <last_validated>2020-11-04 02:29:11</last_validated>
        <parent display_value="Expense Details">0a4a0d1b53802010d6cdddeeff7b1292</parent>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;sp_widget&gt;&lt;category&gt;custom&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[api.controller=function($window) {
	/* widget controller */
	var c = this;
	c.users = c.data.expense.users;
	c.expenseUsersObjArray = [];
	c.expenseDate = c.data.expense.expense_date;
	c.data.expense.total = parseInt(c.data.expense.total);
	c.splitEqually = c.data.expense.split_equally == "true";
	if (!c.data.expense.split_equally) {
		var usersAmount = c.data.expense.user_amount.split(", ");
		for (user in usersAmount) {
			c.expenseUsersObjArray.push({
				'name': user,
				'amount': usersAmount[user]
			});
		}
	}

	c.makePayment = function() {
		c.server.get({
			action: 'updateStatus',
			expenseSysId:c.data.expense_id,
			owingTo: c.data.userExpense.owing_to,
			ownedFrom: c.data.userExpense.owned_from
		}).then(function(r){
			alert("paid successfully");
		});
	}

	c.navigateToDashboard = function() {
		$window.location.href = "?id=splitwise_home_page";
	}

};]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;.exp-id {
  font-weight: bold;
  font-color: black;
  text-decoration: underline;
}

.button {
  padding: 0.5rem;
  margin: 2rem;
}&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;true&lt;/has_preview&gt;&lt;id&gt;expense_details&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function link(scope, element, attrs, controller) {  }]]&gt;&lt;/link&gt;&lt;name&gt;Expense Details&lt;/name&gt;&lt;option_schema/&gt;&lt;public&gt;false&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {

	if(!input) {
		var expenseId = $sp.getParameter('expenseId');
		//var owned = $sp.getParameter('owned');

		data.expense = {};
		data.userExpense = {};
		var expense = new GlideRecord('sn_sw_expense');

		expense.addQuery('number', expenseId);
		expense.query();
		if (expense.next()) {
			// put the expense record sysID in the data, this is required for later actions on the corresponding user expense record
			data.expense_id = expense.getUniqueValue();
			//data.owned = owned == "true";
			$sp.getRecordDisplayValues(data.expense, expense, "number, name, owner, expense_date, description, comments, split_equally, total, users, user_amount");
			if (expense.owner == gs.getUserID()) {
				data.owned = true;
			} else {
				data.owned = false;
			}
		}

		var userExpense = new GlideRecord('sn_sw_user_expense');
		userExpense.addQuery('expense_id', data.expense_id);
		if (data.owned) {
			userExpense.addQuery('owing_to', gs.getUserID());
		} else {
			userExpense.addQuery('owned_from', gs.getUserID());
		}
		userExpense.query();
		if (userExpense.next()) {
			data.owned_from = userExpense.owned_from;
			data.owing_to = userExpense.owing_to;
			$sp.getRecordDisplayValues(data.userExpense, userExpense, "amount, owned_from, owing_to");
		}
	}

	if (input) {
		if (input.action == 'updateStatus') {
			var ownedUserSysId = '';
			var owingUserSysId = '';
			var ownedUser = new GlideRecord('sys_user');
			ownedUser.addQuery('first_name', input.ownedFrom.substring(0, input.ownedFrom.indexOf(' ') + 1));
			ownedUser.addQuery('last_name', input.ownedFrom.substring(input.ownedFrom.indexOf(' ') + 1));
			ownedUser.query();
			if (ownedUser.next()) {
				ownedUserSysId = ownedUser.getUniqueValue();
			}
			var owingUser = new GlideRecord('sys_user');
			owingUser.addQuery('first_name', input.owingTo.substring(0, input.owingTo.indexOf(' ') + 1));
			owingUser.addQuery('last_name', input.owingTo.substring(input.owingTo.indexOf(' ') + 1));
			owingUser.query();
			if (owingUser.next()) {
				owingUserSysId = owingUser.getUniqueValue();
			}

			var userExpense = new GlideRecord('sn_sw_user_expense');
			userExpense.addQuery('expense_id', input.expenseSysId);
			userExpense.addQuery('owned_from', ownedUserSysId);
			userExpense.addQuery('owing_to', owingUserSysId);
			userExpense.query();
			if (userExpense.next()) {
				userExpense.status = 'SETTLED';
				userExpense.update();
			}
		}
	}

})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-10-29 11:05:33&lt;/sys_created_on&gt;&lt;sys_id&gt;0a4a0d1b53802010d6cdddeeff7b1292&lt;/sys_id&gt;&lt;sys_mod_count&gt;223&lt;/sys_mod_count&gt;&lt;sys_name&gt;Expense Details&lt;/sys_name&gt;&lt;sys_package display_value="Splitwise" source="sn_sw"&gt;b620c6ee53c02010d6cdddeeff7b120a&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Splitwise"&gt;b620c6ee53c02010d6cdddeeff7b120a&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_0a4a0d1b53802010d6cdddeeff7b1292&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-11-03 18:25:32&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div class="card"&gt;
  &lt;div class="card-body"&gt;
    &lt;form id="create-expense"&gt;
      &lt;div&gt;
        &lt;div class="field"&gt;
          &lt;label for="expenseTitle"&gt;Expense Title&lt;/label&gt;
          &lt;input type="text" ng-model="c.data.expense.name" class="form-control is-valid" id="validationServer01" value="Title"&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
          &lt;label for="expenseDate"&gt;Expense Date&lt;/label&gt;
          &lt;sp-date-picker field="c.expenseDate" ng-model="c.expenseDate" class="reference-field" sn-change="" sn-include-time="false"/&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="form-row"&gt;
        &lt;div class="field"&gt;
          &lt;label for="expenseTotal"&gt;Expense Total&lt;/label&gt;
          &lt;input type="number" min="0" ng-model="c.data.expense.total" class="form-control is-valid" id="expenseTotal" value="0.0"&gt;
        &lt;/div&gt;
        &lt;div class="form-group field"&gt;
          &lt;div class="check-box"&gt;
            &lt;input ng-model="c.splitEqually" type="checkbox" value="c.splitEqually" id="splitEqually"&gt;
            &lt;label for="splitEqually"&gt;
              Split Equally
            &lt;/label&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
          &lt;label for="expenseUsers"&gt;Expense Group&lt;/label&gt;
          &lt;sn-record-picker field="c.users" class="reference-field" ng-change="c.appendUsers()" table="'sn_sw_expense_group'" display-field="'name'" value-field="'users'" search-fields="'name'" page-size="5"&gt;&lt;/sn-record-picker&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
          &lt;label for="expenseUsers"&gt;Users Added&lt;/label&gt;
          &lt;textarea rows="4" cols="50" class="form-control is-invalid" id="users" ng-model="c.users"&gt;&lt;/textarea&gt;
        &lt;/div&gt;
        &lt;div ng-if="!c.splitEqually"&gt;
          &lt;label for="individualAmounts"&gt;Enter Individual Amounts:&lt;/label&gt;
          &lt;div class="card-border" ng-repeat="expenseUser in c.expenseUsersObjArray"&gt;
            &lt;div class="field"&gt;
              {{expenseUser.name}}
              &lt;span&gt;
                &lt;input class="form-control is-valid" type="number" min="0" ng-model="expenseUser.amount"/&gt;
              &lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
          &lt;label for="expenseDesc"&gt;Description&lt;/label&gt;
          &lt;input type="text" ng-model="c.data.expense.description" class="form-control is-invalid" id="description" &gt;
        &lt;/div&gt;
        &lt;div class="field"&gt;
          &lt;label for="expenseComments"&gt;Comments&lt;/label&gt;
          &lt;input type="text" ng-model="c.data.expense.commensts"class="form-control is-invalid" id="comments"&gt;
        &lt;/div&gt;

        &lt;h3 ng-if="c.data.owned"&gt;
          You Own &lt;b&gt;${{c.data.userExpense.amount}}&lt;/b&gt; from {{c.data.userExpense.owned_from}}
          &lt;div&gt;
            &lt;button class="btn btn-secondary button" type="cancel" ng-click="c.navigateToDashboard()"&gt;Back To Dashboard&lt;/button&gt;
          &lt;/div&gt;
        &lt;/h3&gt;

        &lt;div ng-if="!c.data.owned"&gt;
          &lt;h3&gt;
            You Own &lt;b&gt;${{c.data.userExpense.amount}}&lt;/b&gt; to {{c.data.userExpense.owing_to}}
          &lt;/h3&gt;
          &lt;div&gt;
            &lt;button class="btn btn-primary button" type="submit" ng-click="c.makePayment()"&gt;Make Payment&lt;/button&gt;
            &lt;button class="btn btn-secondary button" type="cancel" ng-click="c.navigateToDashboard()"&gt;Back To Dashboard&lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        
        
      &lt;/div&gt;
    &lt;/form&gt;


  &lt;/div&gt;
&lt;/div&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;</payload>
        <sys_class_name>sp_rel_widget_clone</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-11-04 02:29:11</sys_created_on>
        <sys_id>e8adce4553142010d6cdddeeff7b12f0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>e8adce4553142010d6cdddeeff7b12ed</sys_name>
        <sys_package display_value="Splitwise" source="sn_sw">b620c6ee53c02010d6cdddeeff7b120a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Splitwise">b620c6ee53c02010d6cdddeeff7b120a</sys_scope>
        <sys_update_name>sp_rel_widget_clone_e8adce4553142010d6cdddeeff7b12f0</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-11-04 02:29:11</sys_updated_on>
    </sp_rel_widget_clone>
</record_update>
